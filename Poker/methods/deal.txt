deal: cardArray	| hand1 hand2 type1 type2 modifiedCards |		hand1 := Hand new.	hand2 := Hand new.	modifiedCards := OrderedCollection new.		1 to: 10 do: [ :i |		((cardArray at: i) \\ 13) == 1 ifTrue: [ 			modifiedCards add: ((cardArray at: i) + 12)		] ifFalse: [ 			modifiedCards add: ((cardArray at: i) - 2)		]	].		hand1 setOdd: modifiedCards.	hand2 setEven: modifiedCards.	type1 := hand1 getType.	type2 := hand2 getType.		type1 > type2 ifTrue: [ 		^hand1 getHand.	] ifFalse: [		type2 > type1 ifTrue: [ 			^hand2 getHand.		] ifFalse: [ 			^(self conflictResolve: hand1 and: hand2) getHand.		].	].	