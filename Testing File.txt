| mainArray returnVal tempPoker passArray counter isSame testCaseName|

mainArray := #( 
#( #(1 2 3 4 5) #(6 7 8 9 10) #(6 7 8 9 10) ) 
#( #(52 51 50 49 48) #(39 38 37 36 35) #(48 49 50 51 52) ) 
#( #(52 51 50 49 40) #(39 38 37 36 27) #(49 50 51 52 40) ) "Straight flush" 
#( #(1 14 27 40 41) #(13 26 39 52 11) #(1 14 27 41 40) )"Four of a kind"
#( #(5 18 31 2 15) #(4 17 30 12 25) #(2 5 15 18 31) )"Full house"
#( #(1 2 3 4 5) #(28 29 30 31 32) #(28 29 30 31 32) ) "Straight Flush with ace as low"
#( #(1 13 12 11 10) #(28 29 30 31 32) #(10 11 12 13 1) ) "Straight Flush with ace as high  "
#( #(1 13 12 11 10) #(28 29 30 31 35) #(10 11 12 13 1) ) "Straight Flush against flush "
#( #(1 2 3 5 8) #(28 29 30 31 33) #(2 3 5 8 1) ) "Flush"	
#( #(1 41 16 4 5) #(19 20 34 35 10) #(10 19 20 34 35) ) "Striaght ? can ace count as low"
#( #(1 13 25 37 49) #(19 20 34 35 10) #(13 1 25 37 49) ) "Striaght ace as high "
#( #(11 49 48 34 33) #(50 10 9 21 20) #(9 10 20 21 50) )"Straight where suit is the difference "
#( #(1 14 27 5 34) #(7 20 33 48 50) #(5 1 14 34 27) )"Three of a kind ** CURRENTLY FAILING"
#( #(5 18 31 42 12) #(9 22 35 50 1) #(9 1 22 35 50) )"Three of a Kind"
#( #(1 2 41 14 27) #(13 52 38 25 40) #(2 1 14 27 41) )"two pair"
#( #(1 40 12 25 10) #(14 27 38 51 23) #(1 40 12 25 10) )"two pair"
#( #(1 1 1 1 1) #(1 1 1 1 1) #(1 1 1 1 1) ) 
 ).

"
#( #(1 1 1 1 1) #(1 1 1 1 1) #(1 1 1 1 1) )
"


Transcript clear.
tempPoker := Poker new.
passArray := Array new: 10.

mainArray do: [ :testCase | 
	counter := 1.
	(testCase at: 1) do: [ :x | passArray at: counter put: x. counter:= counter +2 ].
	counter :=2.
	(testCase at: 2) do: [ :x | passArray at: counter put: x. counter:= counter +2 ].
	
	returnVal := tempPoker deal: passArray.
	
	"now check if equal"
	isSame := true.
	1 to: 5 do: [ :checkAt | ((returnVal at: checkAt) == ((testCase at:3) at: checkAt) ) ifFalse: [ isSame:=false ]. ].
	
	testCaseName := 'Test Case: ' , (passArray asString) , ' ->expected: ' , ((testCase at:3) asString) .
	
	isSame ifTrue: [ Transcript show: 'Passed ' , testCaseName ; cr. ] 
	ifFalse: [ Transcript show: 'FAILED!!! at: ' , testCaseName , ' GOT--> ' ,  (returnVal asString); cr. 
		tempPoker printOutDebuggingInfo: passArray ].
	
	 ].
